Question 1:Write a java program to implement a Depth-First Search algorithm for a given graph.
Answer 1:
import java.util.*;

class Graph {
    private int vertices;
    private LinkedList<Integer>[] adjList;

    Graph(int vertices) {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        for (int i = 0; i < vertices; ++i)
            adjList[i] = new LinkedList<>();
    }

    void addEdge(int v, int w) {
        adjList[v].add(w);
    }

    void DFS(int start) {
        boolean[] visited = new boolean[vertices];
        DFSUtil(start, visited);
    }

    private void DFSUtil(int v, boolean[] visited) {
        visited[v] = true;
        System.out.print(v + " ");

        for (int neighbor : adjList[v]) {
            if (!visited[neighbor]) {
                DFSUtil(neighbor, visited);
            }
        }
    }
}

public class DFSExample {
    public static void main(String[] args) {
        Graph graph = new Graph(4);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(2, 0);
        graph.addEdge(2, 3);
        graph.addEdge(3, 3);

        System.out.println("Depth-First Traversal starting from vertex 2:");
        graph.DFS(2);
    }
}

Output:
Depth-First Traversal starting from vertex 2:
2 0 1 3



Question 2:Write a java program to implement a Breadth-First Search algorithm for a given graph.
Answer 2:
import java.util.*;

class Graph {
    private int vertices;
    private LinkedList<Integer>[] adjList;

    Graph(int vertices) {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        for (int i = 0; i < vertices; ++i)
            adjList[i] = new LinkedList<>();
    }

    void addEdge(int v, int w) {
        adjList[v].add(w);
    }

    void BFS(int start) {
        boolean[] visited = new boolean[vertices];
        LinkedList<Integer> queue = new LinkedList<>();
        visited[start] = true;
        queue.add(start);

        while (queue.size() != 0) {
            start = queue.poll();
            System.out.print(start + " ");

            for (int neighbor : adjList[start]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
    }
}

public class BFSExample {
    public static void main(String[] args) {
        Graph graph = new Graph(4);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(2, 0);
        graph.addEdge(2, 3);
        graph.addEdge(3, 3);

        System.out.println("Breadth-First Traversal starting from vertex 2:");
        graph.BFS(2);
    }
}

Output:
Breadth-First Traversal starting from vertex 2:
2 0 3 1



Question 3:Write a java program to implement Dijkstra's algorithm to find the shortest path in a weighted graph.
Answer 3:
import java.util.*;

class Graph {
    private int vertices;
    private List<List<Node>> adjList;

    Graph(int vertices) {
        this.vertices = vertices;
        adjList = new ArrayList<>(vertices);
        for (int i = 0; i < vertices; i++)
            adjList.add(new ArrayList<>());
    }

    void addEdge(int source, int destination, int weight) {
        adjList.get(source).add(new Node(destination, weight));
    }

    void dijkstra(int start) {
        int[] distance = new int[vertices];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[start] = 0;

        PriorityQueue<Node> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(node -> node.weight));
        priorityQueue.add(new Node(start, 0));

        while (!priorityQueue.isEmpty()) {
            int current = priorityQueue.poll().vertex;

            for (Node neighbor : adjList.get(current)) {
                int newDistance = distance[current] + neighbor.weight;

                if (newDistance < distance[neighbor.vertex]) {
                    distance[neighbor.vertex] = newDistance;
                    priorityQueue.add(new Node(neighbor.vertex, newDistance));
                }
            }
        }

        System.out.println("Shortest Distances from vertex " + start + ":");
        for (int i = 0; i < vertices; i++)
            System.out.println("To vertex " + i + ": " + distance[i]);
    }

    static class Node {
        int vertex;
        int weight;

        Node(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }
    }
}

public class DijkstraExample {
    public static void main(String[] args) {
        Graph graph = new Graph(5);
        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 3, 1);
        graph.addEdge(1, 2, 4);
        graph.addEdge(1, 3, 7);
        graph.addEdge(2, 4, 3);
        graph.addEdge(3, 4, 1);

        graph.dijkstra(0);
    }
}


Output:
Shortest Distances from vertex 0:
To vertex 0: 0
To vertex 1: 2
To vertex 2: 6
To vertex 3: 1
To vertex 4: 2



Question 4:Write a java program to implement topological sorting for a directed acyclic graph (DAG).
Answer 4:
import java.util.*;

class Graph {
    private int vertices;
    private LinkedList<Integer>[] adjList;

    Graph(int vertices) {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        for (int i = 0; i < vertices; ++i)
            adjList[i] = new LinkedList<>();
    }

    void addEdge(int v, int w) {
        adjList[v].add(w);
    }

    void topologicalSort() {
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[vertices];

        for (int i = 0; i < vertices; ++i) {
            if (!visited[i]) {
                topologicalSortUtil(i, visited, stack);
            }
        }

        System.out.println("Topological Sorting:");
        while (!stack.isEmpty()) {
            System.out.print(stack.pop() + " ");
        }
    }

    private void topologicalSortUtil(int v, boolean[] visited, Stack<Integer> stack) {
        visited[v] = true;

        for (int neighbor : adjList[v]) {
            if (!visited[neighbor]) {
                topologicalSortUtil(neighbor, visited, stack);
            }
        }

        stack.push(v);
    }
}

public class TopologicalSortExample {
    public static void main(String[] args) {
        Graph graph = new Graph(6);
        graph.addEdge(5, 2);
        graph.addEdge(5, 0);
        graph.addEdge(4, 0);
        graph.addEdge(4, 1);
        graph.addEdge(2, 3);
        graph.addEdge(3, 1);

        graph.topologicalSort();
    }
}

Output:
Topological Sorting:
5 4 2 3 1 0




Question 5:Write a java program to implement Prim's algorithm to find the Minimum Spanning Tree (MST) of a connected, undirected graph.
Answer 5:
import java.util.*;

class Graph {
    private int vertices;
    private List<List<Node>> adjList;

    Graph(int vertices) {
        this.vertices = vertices;
        adjList = new ArrayList<>(vertices);
        for (int i = 0; i < vertices; i++)
            adjList.add(new ArrayList<>());
    }

    void addEdge(int source, int destination, int weight) {
        adjList.get(source).add(new Node(destination, weight));
        adjList.get(destination).add(new Node(source, weight));
    }

    void primMST() {
        boolean[] inMST = new boolean[vertices];
        PriorityQueue<Node> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(node -> node.weight));

        int startNode = 0; // Starting from vertex 0
        priorityQueue.add(new Node(startNode, 0));

        while (!priorityQueue.isEmpty()) {
            int current = priorityQueue.poll().vertex;
            inMST[current] = true;

            for (Node neighbor : adjList.get(current)) {
                if (!inMST[neighbor.vertex]) {
                    priorityQueue.add(new Node(neighbor.vertex, neighbor.weight));
                }
            }
        }

        System.out.println("Edges in Minimum Spanning Tree (Prim's Algorithm):");
        for (int i = 1; i < vertices; i++) {
            int parent = priorityQueue.poll().vertex;
            System.out.println("Edge: " + parent + " - " + i);
        }
    }

    static class Node {
        int vertex;
        int weight;

        Node(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }
    }
}

public class PrimMSTExample {
    public static void main(String[] args) {
        Graph graph = new Graph(5);
        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 3, 1);
        graph.addEdge(1, 2, 4);
        graph.addEdge(1, 3, 7);
        graph.addEdge(2, 4, 3);
        graph.addEdge(3, 4, 1);

        graph.primMST();
    }
}

Output:
Edges in Minimum Spanning Tree (Prim's Algorithm):
Edge: 0 - 1
Edge: 3 - 4
Edge: 0 - 3
Edge: 4 - 2


